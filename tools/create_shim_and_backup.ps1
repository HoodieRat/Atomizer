# Safe backup + shim creator for AtomizeJs
# Backs up input\t.js to input\t_old.js (timestamp if exists), then writes a shim that re-exports t.js.atomized.js

$src = Join-Path (Get-Location) 'input\t.js'
$atom = Join-Path (Get-Location) 'input\t.js.atomized.js'
if (-not (Test-Path $atom)) {
    Write-Host "Atomized bridge not found: $atom"; exit 1
}
if (-not (Test-Path $src)) {
    Write-Host "Source file not found: $src"; exit 1
}

$base = [System.IO.Path]::GetFileNameWithoutExtension($src)
$ext = [System.IO.Path]::GetExtension($src)
$backup = Join-Path (Split-Path $src -Parent) ($base + '_old' + $ext)
if (Test-Path $backup) {
    $stamp = Get-Date -Format yyyyMMddHHmmss
    $backup = Join-Path (Split-Path $src -Parent) ($base + '_old_' + $stamp + $ext)
}
Copy-Item -Path $src -Destination $backup -Force
Write-Host "Backed up $src -> $backup"

$shimContent = @(
    "'use strict';",
    "",
    "// Shim re-exporting atomized bridge generated by AtomizeJs",
    "export * from './t.js.atomized.js';",
    ""
)

# Write shim atomically
$tmp = $src + '.shim.tmp'
$shimContent | Out-File -FilePath $tmp -Encoding utf8
Move-Item -Path $tmp -Destination $src -Force
Write-Host "Wrote shim to $src"

Write-Host "Current files in input:"
Get-ChildItem -Path (Join-Path (Get-Location) 'input') -File | Select-Object Name, Length | Format-Table -AutoSize

Write-Host "--- shim head ---"
Get-Content -Path $src -TotalCount 40 | ForEach-Object { Write-Host $_ }
